/**
 * DIGIPIN encoder / decoder (2025 grid) – sentinel-string flavour
 * ===============================================================
 * • `getDIGIPINFromLatLon()` → DIGIPIN | 'Out of Bound'
 * • `getLatLonFromDIGIPIN()` → { latitude, longitude } | 'Invalid DIGIPIN'
 * • `getBoundsFromDIGIPIN()` → { minLat, maxLat, minLon, maxLon } | 'Invalid DIGIPIN'
 */
export interface DigiPinLatLon {
    latitude: number;
    longitude: number;
}
export interface DigiPinBounds {
    minLat: number;
    maxLat: number;
    minLon: number;
    maxLon: number;
}
/**
 * Encode a latitude / longitude into a 10-character DIGIPIN.
 * Returns `'Out of Bound'` if the input lies outside the supported area
 * or is not a finite number.
 */
export declare function getDIGIPINFromLatLon(lat: number, lon: number): string;
/**
 * Decode a DIGIPIN and return its centre point.
 * Returns `'Invalid DIGIPIN'` on error.
 */
export declare function getLatLonFromDIGIPIN(pin: string): DigiPinLatLon | 'Invalid DIGIPIN';
/**
 * Decode a DIGIPIN and return its bounding box.
 * Returns `'Invalid DIGIPIN'` on error.
 */
export declare function getBoundsFromDIGIPIN(pin: string): DigiPinBounds | 'Invalid DIGIPIN';
declare const digipin: {
    getDIGIPINFromLatLon: typeof getDIGIPINFromLatLon;
    getLatLonFromDIGIPIN: typeof getLatLonFromDIGIPIN;
    getBoundsFromDIGIPIN: typeof getBoundsFromDIGIPIN;
};
export default digipin;
//# sourceMappingURL=index.d.ts.map